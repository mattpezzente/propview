"use strict";var precacheConfig=[["/propview/index.html","13e89ccc915039f958720cb625d6488e"],["/propview/static/css/main.536b439f.css","472ef4344eba2d9a0a74a83d5abbd7ce"],["/propview/static/js/main.acc08ebb.js","968b4607a12cb10cdcc567837909600d"],["/propview/static/media/propview-built-icon.de872c6a.png","de872c6a693c945e0ca895c2b13759f5"],["/propview/static/media/propview-cooling-icon.af1e6b0a.png","af1e6b0ac0d74a235f1abc3c87356eea"],["/propview/static/media/propview-landing-1.2aecfc2d.jpeg","2aecfc2d7bc92fdd47b9239147f4517a"],["/propview/static/media/propview-landing-2.22d7ea46.jpeg","22d7ea468b86acde67669cf6373abae2"],["/propview/static/media/propview-landing-3.d7702948.jpeg","d7702948bbeefb32256c92bc9bf06806"],["/propview/static/media/propview-landing-5.0acd79c1.jpeg","0acd79c1f25532305818f092c38b0ed9"],["/propview/static/media/propview-landing-6.cea7ccea.jpeg","cea7ccea93eae9a9f83ecb17b539f170"],["/propview/static/media/propview-landing-7.93a9527e.jpeg","93a9527e88e16820572da89690c951c9"],["/propview/static/media/propview-logo.9848dbf8.png","9848dbf86a8e4c0a8c6a718838dc9625"],["/propview/static/media/propview-lot-icon.7c054fa9.png","7c054fa91eb44086d28867654d69a0ef"],["/propview/static/media/propview-roof-icon.550ee68f.png","550ee68f01adc486ffa60ef8edc0fea9"],["/propview/static/media/propview-search-icon.497e4d93.png","497e4d93113b2130d90b7b0a863c7684"],["/propview/static/media/propview-type-icon.1baa9997.png","1baa99975219986f6885db3d8666b5c8"],["/propview/static/media/propview-value-icon.7ef39796.png","7ef397969e922e4deb109a154a414990"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),t=urlsToCacheKeys.has(a));var r="/propview/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(r,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});